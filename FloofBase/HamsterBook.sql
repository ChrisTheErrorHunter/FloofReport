CREATE DATABASE "HamsterBook"
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'en_US.UTF-8'
    LC_CTYPE = 'en_US.UTF-8'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;

CREATE TABLE IF NOT EXISTS public.cageareas
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(32) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT cageareas_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.cageareas
    OWNER to postgres;

CREATE TABLE IF NOT EXISTS public.cages
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    location character varying(128) COLLATE pg_catalog."default" NOT NULL,
    beddingtype character varying(32) COLLATE pg_catalog."default" NOT NULL,
    beddingdepth smallint NOT NULL,
    size character varying(64) COLLATE pg_catalog."default",
    CONSTRAINT cages_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.cages
    OWNER to postgres;

CREATE TABLE IF NOT EXISTS public.hamsters
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(32) COLLATE pg_catalog."default" NOT NULL,
    dateofbirth date NOT NULL,
    dateofadoption date,
    race character varying(32) COLLATE pg_catalog."default",
    sex bit(1),
    CONSTRAINT hamsters_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.hamsters
    OWNER to postgres;

CREATE TABLE IF NOT EXISTS public.visualevents
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    registrationtime timestamp without time zone NOT NULL,
    cageid integer,
    hamsterid integer NOT NULL,
    areaid integer NOT NULL,
    CONSTRAINT visualevents_pkey PRIMARY KEY (id),
    CONSTRAINT fk_area FOREIGN KEY (areaid)
        REFERENCES public.cageareas (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_cage FOREIGN KEY (cageid)
        REFERENCES public.cages (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_hamster FOREIGN KEY (hamsterid)
        REFERENCES public.hamsters (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)